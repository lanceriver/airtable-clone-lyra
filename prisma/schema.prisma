// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]

}

model Base {
    id        String   @id @default(cuid())
    name      String
    ownerId   String
    owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tables    Table[]
    tableCount Int     @default(0)
}

model Table {
    id        String   @id @default(cuid())
    name      String
    baseId    String
    base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    columns   Column[]
    rows      Row[]
    views     View[]
    colCount  Int
    rowCount  Int
    seed      Int?
    activeViewId String?

    @@unique([baseId, name])
}

model View {
    id        String   @id @default(cuid())
    name      String
    tableId   String
    table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    columns   Column[] @relation("ViewColumns")
    columnIds String[] @default([])
    filters   Json[] 
    sort      Json? 
    visibleColumns String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    /* colCount  Int
    rowCount  Int */

    @@unique([tableId, name])
    @@map("views") // maps your model to a table named "views" since "view" is a reserved keyword in some SQL dialects
}

model Column {
    //position   Int      
    id         String   @id @default(cuid())
    name       String
    tableId    String
    table      Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    type       String
    cells      Cell[]
    views      View[]   @relation("ViewColumns")

    //@@unique([tableId, position])
}

model Row {
    //position   Int      
    id         String   @id @default(cuid())
    tableId    String
    table      Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    cells      Cell[]
    
    //@@unique([tableId, position])
}

model Cell {
    id        String   @id @default(cuid())
    rowId     String
    columnId    String
    row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
    column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    stringValue     String?
    numberValue     Int?
    @@index([stringValue])
    @@index([numberValue])
    @@index([rowId])
    @@index([columnId])
    @@unique([rowId, columnId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
